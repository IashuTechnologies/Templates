AWSTemplateFormatVersion: 2010-09-09
Metadata:
  License: Apache-2.0
  'AWS::CloudFormation::Designer':
    f47996dd-45d7-4afc-971a-4b2115b9b444:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 90
      z: 1
      embeds: []
    4432ba80-06f3-493c-b2d8-fc75cecf3686:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 90
      z: 1
      embeds: []
      isassociatedwith:
        - f47996dd-45d7-4afc-971a-4b2115b9b444
Description: >-
  AWS CloudFormation Sample Template ELBStickinessSample: Create a load balanced
  sample web site with ELB stickiness enabled. The AI is chosen based on the
  region in which the stack is run. This example creates 2 EC2 instances behind
  a load balancer with a simple health check. The ec2 instnces are untargeted
  and may be deployed in one or more availaiblity zones. The web site is
  available on port 80, however, the instances can be configured to listen on
  any port (8888 by default). **WARNING** This template creates one or more
  Amazon EC2 instances and an Elastic Load Balancer. You will be billed for the
  AWS resources used if you create a stack from this template.
Parameters:
  InstanceAMIParameter:
    Description: Launch EC2 instance from this AMI
    Type: AWS::EC2::Image::Id
    Default: ami-0a887e401f7654935
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  NetworkStackParameter:
    Type: String
    Default: vpcsta
  SshKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: dnew
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  Region2Examples:
    us-east-1:
      Examples: 'https://s3.amazonaws.com/cloudformation-examples-us-east-1'
    us-west-2:
      Examples: 'https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2'
    us-west-1:
      Examples: 'https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1'
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64    
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-6869aa05
      HVMG2: ami-50b4f047
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-7172b611
      HVMG2: ami-002bf460
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-31490d51
      HVMG2: ami-699ad409 
Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from the Internet.
      VpcId: !ImportValue 
        'Fn::Sub': '${NetworkStackParameter}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress1:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0a887e401f7654935
      NetworkInterfaces:
        GroupSet: 
        - Fn::ImportValue: !Sub '${NetworkStack-SecurityGroupID}'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId:
          Fn::ImportValue: !Sub '${NetworkStack-SubnetID}'
    Metadata:
      Comment: Install a simple application
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join 
                - |+

                - - <img src="
                  - !FindInMap 
                    - Region2Examples
                    - !Ref 'AWS::Region'
                    - Examples
                  - /cloudformation_graphic.png" alt="AWS CloudFormation Logo"/>
                  - >-
                    <h1>Congratulations, you have successfully launched the AWS
                    CloudFormation sample.</h1>
          commands:
            1_httpdservice:
              command: service httpd restart
            1_pvcreate:
              command: pvcreate /dev/xvdf
            2_vgcreate:
              command: vgcreate vg0 /dev/xvdf
            3_lvcreate:
              command: lvcreate -l 100%FREE -n myapp vg0
            4_mkfs:
              command: mkfs.ext4 /dev/vg0/myapp
            5_mkdir:
              command: mkdir /var/myapp
            6_fstab:
              command: echo "/dev/mapper/vg0-myapp /var/myapp ext4 defaults 0 2" >> /etc/fstab
            7_mount:
              command: mount -a  
    Properties:
      KeyName: !Ref SshKeyName
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource EC2Instance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource EC2Instance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
      BlockDeviceMappings:
        # Create a separate volume
        - DeviceName: /dev/sdf
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 10
      ImageId: !Ref InstanceAMIParameter
      InstanceType: !Ref InstanceType
      KeyName: !Ref SshKeyName
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !ImportValue 
            'Fn::Sub': '${NetworkStackParameter}-SubnetID'
      UserData:
        Fn::Base64: !Sub |
         #!/usr/bin/env bash
         set -o errexit
         yum -y update aws-cfn-bootstrap
         /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
         /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        
Outputs:
  URL:
    Description: URL of the sample website
    Value: !Join 
      - ''
      - - 'http://'
  EC2InstancePublicIp:
    Description: EC2 instance public IP address
    Value: !GetAtt EC2Instance.PublicIp